- Tipo de tipagem: dinamica e forte
    - Dinamica: Python ja sabe o tipo da informacao que estamos passando para ele
    - Forte: Nao converte um tipo em outro automaticamente (so converte quando utilizamos funcoes especificas e se for possivel)
- Tipos primitivos imutaveis
    - Imutaveis --> Nao conseguimos mudar
        - Podemos atribuir o/a str/int/float/bool de uma variavel a outra para manipular, mas o valor original, atribuido a primeira variavel, se mantem --> Por isso imutavel
    - strings
        - Caracteres colocados entre aspas '' ou ""
        - Caractere de escape --> \ --> Faz com que o interpretador ignore o proximo caractere --> Permite printar aspas dentro de aspas (e.g., "Vitor \"Lima\"")
        - r --> Mostra o caractere de escape --> print(r"Vitor \"Lima\"")
        - Uma maneira mais facil é utilzar aspas duplas dentro de aspas simples ou o contrario
    - int e float
        - int = Numeros inteiros positivos ou negativos ou 0
        - float = Numeros positivos ou negativos ou 0, com ponto flutuante
        - Classe type
            - E uma classe, nao uma funcao --> A sintaxe confunde pois classes no geral comecam com letra maiuscula e são callable 
            - Retorna o tipo
    - bool
        - Apenas dois valores: True ou False
        - Retornado por operadores lógicos (e.g., ==, >, < etc.)
- Tipos mutaveis
    - Listas
        - Suporta varios valores de qualquer tipo
        - Conhecimentos reutilizaveis --> Indices e fatiamento
        - Se estiver vazia --> falsy
        - Metodos uteis:
            - append --> Adiciona um elemento no final da listas
                - Nao requer tanto processamento uma vez que nenhum indice anterior ao elemento adicionado sera alterado
            - insert --> Insere um elemento em determinado indice
            - pop --> Remove o ultimo item, por padrao, ou em um determinado indice 
                - Podemos armazenar o ultimo valor removido em uma variavel
            - del --> Deleta o elemento de um determinado indice
                - E importante se atentar com esses processos, pois dependendo do local de insercao ou remocao, muitos indices terao que ser alterados --> Causa de lentidao
                - O mais interessante de se fazer com listas é remover ou colocar dados no final dela
            - clear --> Limpa toda a lista
            - +
                - Cria uma lista igual a concatenacao de outras listas
            - extend
                - Altera a lista original, concatenando uma outra lista passada como argumento --> Nao retorna uma lista --> Retorna None
    - Cuidados com dados mutaveis
        - Atribuir uma lista que ja esteja atribuida a uma variavel a outra variavel nao cria uma copia, como nos dados imutaveis, e sim um conexao
            - lista_a = [1, 2, 3]
            - lista_b _ lista_a --> Ambos apontam para o mesmo endereco de memoria --> Isso implica em, se mudarmos qualquer coisa na lista_a, a lista_b tambem sera alterada e vice-versa
            - Para criar uma copia --> Utilizar o metodo .copy()